// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pruebaunoparcial.Data;

namespace Pruebaunoparcial.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180601000853_y")]
    partial class y
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Contacto", b =>
                {
                    b.Property<int>("ContactoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmpleadoId");

                    b.Property<DateTime>("Fecha");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("UsuarioId");

                    b.HasKey("ContactoId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Contacto");
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Contrato", b =>
                {
                    b.Property<int>("ContratoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Tipo_contrato")
                        .HasMaxLength(100);

                    b.HasKey("ContratoId");

                    b.ToTable("Contrato");
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Curso", b =>
                {
                    b.Property<int>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Fecha_fin");

                    b.Property<string>("entidad");

                    b.Property<DateTime>("fecha_ini");

                    b.Property<string>("obsevacion");

                    b.HasKey("CursoId");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Desempleado", b =>
                {
                    b.Property<int>("DesempleadoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("fecha_fin");

                    b.Property<DateTime>("fecha_ini");

                    b.Property<string>("tiempo")
                        .IsRequired()
                        .HasMaxLength(9);

                    b.HasKey("DesempleadoId");

                    b.ToTable("Desempleado");
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Discapacidad", b =>
                {
                    b.Property<int>("DiscapacidadId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tipo");

                    b.HasKey("DiscapacidadId");

                    b.ToTable("Discapacidad");
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Empleado", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Cedula")
                        .HasMaxLength(10);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Telefono")
                        .HasMaxLength(19);

                    b.Property<string>("Tipo_gabinete")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("EmpleadoId");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Empleo", b =>
                {
                    b.Property<int>("EmpleoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cargo");

                    b.Property<string>("Empresa");

                    b.Property<DateTime>("Fecha_fin");

                    b.Property<DateTime>("Fecha_ini");

                    b.Property<string>("Mediador");

                    b.HasKey("EmpleoId");

                    b.ToTable("Empleo");
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Estudio", b =>
                {
                    b.Property<int>("EstudioId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Detalle");

                    b.HasKey("EstudioId");

                    b.ToTable("Estudio");
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Usu_empleado", b =>
                {
                    b.Property<int>("Usu_empleadoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DesempleadoId");

                    b.Property<int>("DesempleoId");

                    b.Property<int>("EmpleoId");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Usu_empleadoId");

                    b.HasIndex("DesempleadoId");

                    b.HasIndex("EmpleoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Usu_empleado");
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Usu_estudio", b =>
                {
                    b.Property<int>("Usu_estudioId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EstudioId");

                    b.Property<int>("EstudiosId");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Usu_estudioId");

                    b.HasIndex("EstudioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Usu_estudio");
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .IsRequired();

                    b.Property<string>("Direccion")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("Empadronado")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("EstadoCivil")
                        .IsRequired();

                    b.Property<DateTime>("Fecha_Alta");

                    b.Property<DateTime>("Fecha_Nacimiento");

                    b.Property<string>("Identificacion")
                        .IsRequired();

                    b.Property<string>("N_Identificacion")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Nacionalidad")
                        .IsRequired();

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<int>("NumeroHijos");

                    b.Property<int>("NumeroSeguridadSocial");

                    b.Property<string>("Permiso_Recidencia")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Permiso_Trabajo")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<string>("Telefono")
                        .IsRequired();

                    b.Property<string>("Tipo_Licencia")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Usuario_discapacidad", b =>
                {
                    b.Property<int>("Usuario_discapacidadId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscapacidadId");

                    b.Property<string>("Porcentaje");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Usuario_discapacidadId");

                    b.HasIndex("DiscapacidadId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Usuario_discapacidad");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pruebaunoparcial.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pruebaunoparcial.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pruebaunoparcial.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pruebaunoparcial.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Contacto", b =>
                {
                    b.HasOne("Pruebaunoparcial.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pruebaunoparcial.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Usu_empleado", b =>
                {
                    b.HasOne("Pruebaunoparcial.Models.Desempleado", "Desempleado")
                        .WithMany()
                        .HasForeignKey("DesempleadoId");

                    b.HasOne("Pruebaunoparcial.Models.Empleo", "Empleo")
                        .WithMany()
                        .HasForeignKey("EmpleoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pruebaunoparcial.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Usu_estudio", b =>
                {
                    b.HasOne("Pruebaunoparcial.Models.Estudio", "Estudio")
                        .WithMany()
                        .HasForeignKey("EstudioId");

                    b.HasOne("Pruebaunoparcial.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pruebaunoparcial.Models.Usuario_discapacidad", b =>
                {
                    b.HasOne("Pruebaunoparcial.Models.Discapacidad", "Discapacidad")
                        .WithMany()
                        .HasForeignKey("DiscapacidadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pruebaunoparcial.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
